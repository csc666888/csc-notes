import{_ as a,c as e,b as p,a as t,r as l,o}from"./app-BtemuHlG.js";const c={};function i(r,n){const s=l("Utterances");return o(),e("div",null,[n[0]||(n[0]=p(`<h1 id="javascript操作符" tabindex="-1"><a class="header-anchor" href="#javascript操作符"><span>JavaScript操作符</span></a></h1><p>ECMA-262描述了一组可用于操作数据值的操作符，包括数学操作符（如加、减）、位操作符、关系操作符和相等操作符等。ECMAScript中的操作符是独特的，因为它们可用于各种值，包括字符串、数值、布尔值、甚至还有对象。对于对象，操作符通常会调用valueOf()和/或toString()方法来取得可计算的值。</p><h2 id="_1-一元操作符" tabindex="-1"><a class="header-anchor" href="#_1-一元操作符"><span>1.一元操作符</span></a></h2><p>只操作一个值的操作符叫一元操作符。一元操作符是ECMAScript中最简单的操作符。</p><h3 id="_1-1-递增-递减操作符" tabindex="-1"><a class="header-anchor" href="#_1-1-递增-递减操作符"><span>1.1 递增/递减操作符</span></a></h3><p>递增和递减操作符直接照搬自C语言，但有两个版本：前缀版和后缀版</p><blockquote><p>前缀版</p></blockquote><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">++</span>age<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个例子，前缀递增操作符把age的值变成了30（给之前的值29加1）。因此实际等于如下表达式。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span></span>
<span class="line">age <span class="token operator">=</span> age <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>前缀递减操作符也是类似。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token operator">--</span>age<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>执行操作后，变量age的值变成了28。</p><p>无论是前缀递增还是前缀递减，变量的值都会在语句被求值之前改变。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> age1 <span class="token operator">=</span> <span class="token operator">--</span>age <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 28</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>变量age1以age减1后的值再加上2进行初始化。因为递减操作符先发生，所以age的值先变成28，然后再加2，结果是30。</p><p>前缀递增和递减在语句中的优先级是相等的，因此会从左到右依次执行。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> num3 <span class="token operator">=</span> <span class="token operator">--</span>num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> num4 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>后缀版</p></blockquote><p>递增和递减后缀版语法一样（分别是++和--），只不过要放到变量后面。后缀版与前缀版的主要区别在于，后缀版递增和递减在语句被求值后才发生。在某些情况下，这种差异没什么影响。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span></span>
<span class="line">age<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 30</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>把递增操作符放到变量后面不会改变语句执行的结果，因为递增是唯一的操作。可是，再跟其他操作混合时，差异就会很明显。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> num1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> num2 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> num3 <span class="token operator">=</span> num1<span class="token operator">--</span> <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> num4 <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 22</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这四个操作符可以作用于任何值，意思就是不限于整数、字符串、布尔值、浮点值、甚至对象都可以。递增和递减遵循以下规则。</p><ul><li>对于字符串，如果是有效的数值形式，则转化为数值再应用改变。变量类型从字符串变为数值类型。</li><li>对于字符串，如果不是有效的数值形式，则将变量的值设置为NaN。变量类型从字符串变为数值类型。</li><li>对于布尔值，如果是false，则转化为0再应用改变。变量类型转变为数值类型。</li><li>对于布尔值，如果是true，则转化为1再应用改变。变量类型转变为数值类型。</li><li>对于浮点值，加1或减1。</li><li>对于对象，则调用其valueOf()方法取得可以操作的值。对得到的值应用上述规则。如果是NaN，则调用toString()并再次应用上述规则。变量类型从对象转变为数值。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> d <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> e <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为3</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为NaN</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为2</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为1.1</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">++</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 结果为0</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2一元加和减" tabindex="-1"><a class="header-anchor" href="#_1-2一元加和减"><span>1.2一元加和减</span></a></h3><p>一元加和减操作符对大多数开发者来说并不陌生，它们在ECMAScript中跟在高中数学中的用途一样。</p><p>一元加由一个加号表示（+），放在变量前头，对数值没有任何影响。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token operator">+</span>num<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 25</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果将一元加应用到非数值。则会执行与使用Number()转型函数一样的类型转换：布尔值转化为0或1，字符串进行特殊解析，对象会调用它们的valueOf()和/或toString()方法得到的值。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> str1 <span class="token operator">=</span> <span class="token string">&#39;01&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> str2 <span class="token operator">=</span> <span class="token string">&#39;1.1&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> str3 <span class="token operator">=</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token number">1.1</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">str1 <span class="token operator">=</span> <span class="token operator">+</span>str1<span class="token punctuation">;</span> <span class="token comment">// 结果为1</span></span>
<span class="line">str2 <span class="token operator">=</span> <span class="token operator">+</span>str2<span class="token punctuation">;</span> <span class="token comment">// 结果为1.1</span></span>
<span class="line">str3 <span class="token operator">=</span> <span class="token operator">+</span>str3<span class="token punctuation">;</span> <span class="token comment">// 结果为NaN</span></span>
<span class="line">b <span class="token operator">=</span> <span class="token operator">+</span>b<span class="token punctuation">;</span> <span class="token comment">// 结果为0</span></span>
<span class="line">f <span class="token operator">=</span> <span class="token operator">+</span>f<span class="token punctuation">;</span> <span class="token comment">// 结果为 1.1</span></span>
<span class="line">o <span class="token operator">=</span> <span class="token operator">+</span>o<span class="token punctuation">;</span> <span class="token comment">// 结果为 -1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一元减由一个减号表示（-），放在变量前头，主要用于把数值变为负值。如把1转变为-1。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">num <span class="token operator">=</span> <span class="token operator">-</span>num<span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// -25</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>一元减遵循与一元加同样的规则，先进行转化，然后再取负值。</p><p>一元加和减操作符主要用于基本算数，也可以用于数据类型转化。</p><h2 id="_2-位运算符" tabindex="-1"><a class="header-anchor" href="#_2-位运算符"><span>2.位运算符</span></a></h2>`,37)),t(s)])}const d=a(c,[["render",i]]),k=JSON.parse('{"path":"/notes/web/javascript/base/grammar/%E6%93%8D%E4%BD%9C%E7%AC%A6.html","title":"JavaScript操作符详解","lang":"zh-CN","frontmatter":{"title":"JavaScript操作符详解","meta":[{"name":"description","content":"本节将详细介绍JavaScript中的各种操作符，包括算术操作符、比较操作符、逻辑操作符、位操作符、赋值操作符等"},{"name":"keywords","content":"JavaScript, 操作符, 算术操作符, 比较操作符, 逻辑操作符, 位操作符, 赋值操作符, 条件操作符, 逗号操作符, 运算符优先级"}]},"headers":[{"level":2,"title":"1.一元操作符","slug":"_1-一元操作符","link":"#_1-一元操作符","children":[{"level":3,"title":"1.1 递增/递减操作符","slug":"_1-1-递增-递减操作符","link":"#_1-1-递增-递减操作符","children":[]},{"level":3,"title":"1.2一元加和减","slug":"_1-2一元加和减","link":"#_1-2一元加和减","children":[]}]},{"level":2,"title":"2.位运算符","slug":"_2-位运算符","link":"#_2-位运算符","children":[]}],"git":{"updatedTime":1747993307000,"contributors":[{"name":"chenshicong","username":"chenshicong","email":"chenshicong666@qq.com","commits":3,"url":"https://github.com/chenshicong"}],"changelog":[{"hash":"a63dd200e2f595ec25173025fc31dfcc8b0447e3","time":1747993307000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"修改站点地址"},{"hash":"a6bd8c6a5091b9bf28ecc251928d960482f57a42","time":1747914312000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"完成一元运算符"},{"hash":"d78ea0ac931ae3ba09698cb79415ce6c1e5c2ac2","time":1747659450000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"优化SEO"}]},"filePathRelative":"notes/web/javascript/base/grammar/操作符.md"}');export{d as comp,k as data};
