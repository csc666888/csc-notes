import{_ as a,c as e,b as p,a as o,r as t,o as c}from"./app-BiTihz12.js";const i={};function l(r,n){const s=t("Utterances");return c(),e("div",null,[n[0]||(n[0]=p(`<h1 id="commonjs的模块规范" tabindex="-1"><a class="header-anchor" href="#commonjs的模块规范"><span>CommonJS的模块规范</span></a></h1><h2 id="为什么需要commonjs" tabindex="-1"><a class="header-anchor" href="#为什么需要commonjs"><span>为什么需要CommonJS</span></a></h2><p>在JavaScript发展历程中，主要在浏览器端发光发热。官方规范（ECMAScript）规范化的时间较早，规范涵盖的范畴非常小。随着HTML5规范的推广以及各大浏览器厂商对规范的支持，在浏览器中出现了更多、更强大的API调用。但对于后端JavaScript的规范却远远落后，对于JavaScript本身而言规范依然是薄弱的。主要体现在</p><ul><li>没有模块系统</li><li>标准库少：ECMA仅定义了部分核心库，对于文件系统，I/O流等常见需求却没有标准的API，ECMA的规范主要还是停留在了前端浏览器上。</li><li>没有标准接口：在JavaScript中，几乎没有定义过Web服务器或者数据库之类的标准统一接口。</li><li>缺乏包管理系统：导致JavaScript基本没有能力自动加载和安装依赖。</li></ul><p>CommonJS规范的提出是想让JavaScript具备开发大型应用的基础能力，主要体现在</p><ul><li>服务端JavaScript应用程序</li><li>命令行工具</li><li>桌面图形界面应用程序</li></ul><h2 id="commonjs具体规范定义" tabindex="-1"><a class="header-anchor" href="#commonjs具体规范定义"><span>CommonJS具体规范定义</span></a></h2><p>CommonJS对模块的定义十分简单，主要分为<strong>模块引用</strong>、<strong>模块定义</strong>、<strong>模块标识</strong>三部分\`。</p><h2 id="_1、模块引用" tabindex="-1"><a class="header-anchor" href="#_1、模块引用"><span>1、模块引用</span></a></h2><p>先看示例代码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> aModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;aModule&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>在CommonJS规范中，存在<code>require()</code>方法，这个方法接收模块标识，以此引入一个模块的API到当前上下文中。</p><h2 id="_2、模块定义" tabindex="-1"><a class="header-anchor" href="#_2、模块定义"><span>2、模块定义</span></a></h2><p>在模块中，上下文提供<code>require()</code>方法来引入外部模块，对应引入的功能，上下文提供了<code>exports</code>对象，它代表模块本身，并且<code>exports</code>对象是唯一的导出出口。在模块中，还存在一个<code>module</code>对象，它代表模块的本身，而<code>exports</code>是<code>module</code>的一个属性。在Node中，一个文件就是一个模块，将方法挂载到<code>exports</code>对象上作为属性即可定义导出方式。</p><p>示例代码</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// 文件a.js</span></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在另一个文件中，可以通过<code>require</code>方法引入模块后，就可以调用<code>a</code>模块定义的属性和方法了</p><p>代码示例</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">const</span> <span class="token punctuation">{</span>add<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;a.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：因为<code>exports</code>是<code>module</code>的一个属性，我们也可以通过 <code>module.exports = add (a, b) =&gt; a + b</code>导出属性和方法。但是在实际开发中请勿在一个模块中混合使用<code>exports</code>和<code>module.exports</code>去导出属性和方法，看下面例子</p><p>没问题的导出</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// a.js</span></span>
<span class="line">module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span><span class="token function-variable function">sub</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有问题的导出</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">// b.js</span></span>
<span class="line">module<span class="token punctuation">.</span><span class="token function-variable function">exports</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">exports<span class="token punctuation">.</span><span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>仔细对比一下两次导出，有问题的导出是将<code>module.exports</code>指向了新的引用，这就与<code>exports</code>切断了联系，导致<code>exports</code>成为了一个孤立的对象，而导出是导出的<code>module.exports</code>中的属性和方法，这也导致了<code>b.js</code>文件中<code>add</code>方法没有被正确导出来。</p><p>所以在实际开发中一个js文件（模块）应该减少或禁止<code>module.exports</code>和<code>exports</code>的混合使用。</p><h2 id="_3、模块标识" tabindex="-1"><a class="header-anchor" href="#_3、模块标识"><span>3、模块标识</span></a></h2><p>模块标识就是传递给<code>require</code>方法的参数，它必须符合小驼峰命名的字符串或者以<code>.</code>、<code>..</code>开头的相对路径，或者绝对路径。</p><p>模块的定义十分简单，接口也十分简洁。它的意义在于将类聚的方法和变量等限制在私有的作用域中，同时支持引入和导出功能，每个模块都有独立的空间，它们互不干扰。</p><p>CommonJS构建的这套导入导出机制使得用户完全不必考虑变量污染问题。</p>`,30)),o(s)])}const u=a(i,[["render",l]]),m=JSON.parse('{"path":"/notes/server/nodejs/CommonJS%E8%A7%84%E8%8C%83.html","title":"CommonJS的模块规范","lang":"zh-CN","frontmatter":{"title":"CommonJS的模块规范","meta":[{"name":"description","content":"本节将介绍CommonJS的模块规范"}]},"git":{"updatedTime":1745293651000,"contributors":[{"name":"chenshicong","username":"chenshicong","email":"chenshicong666@qq.com","commits":3,"url":"https://github.com/chenshicong"}],"changelog":[{"hash":"1eee15ad578cdfc62d1a0381dcf0b016c115af16","time":1745293651000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"添加文档说明"},{"hash":"4f8aaeace2e40f47ca66bd889f3976bd3a2a2134","time":1744458825000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"更新笔记分组，新增css和文档"},{"hash":"43cfd364529133f426564d4d9492efc7189c468f","time":1744201214000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"新增CommonJS规范"}]},"filePathRelative":"notes/server/nodejs/CommonJS规范.md"}');export{u as comp,m as data};
