import{_ as n,c as e,b as i,a as t,r as c,o as p}from"./app-D4e3kWYc.js";const l={};function r(o,a){const s=c("Utterances");return p(),e("div",null,[a[0]||(a[0]=i(`<h1 id="语法" tabindex="-1"><a class="header-anchor" href="#语法"><span>语法</span></a></h1><div class="hint-container tip"><p class="hint-container-title">提示</p><p>ECMAScript的语法很大程度上借鉴了C语言和其他类C语言</p></div><h2 id="_1-区分大小写" tabindex="-1"><a class="header-anchor" href="#_1-区分大小写"><span>1.区分大小写</span></a></h2><p>首先要知道，ECMAScript中一切都区分大小写。无论是变量、函数名还是操作符，都区分大小写。变量<code>Test</code>和<code>test</code>是两个不同的变量。类似的，<code>typeof</code>不能作为函数名，因为它是一个关键字。但是<code>Typeof</code>是一个有效的变量或函数名。</p><h2 id="_2-标识符" tabindex="-1"><a class="header-anchor" href="#_2-标识符"><span>2.标识符</span></a></h2><p>标识符就是变量、函数、属性或函数参数名称。标识符可以由一个或多个下列字符组成</p><ul><li>第一个字符必须是一个字母、下划线(_)或美元符号($);</li><li>剩下的其他字符可以是字母、下划线、美元符号或数字。</li></ul><p>标识符中的字符可以是扩展ASCII中的字母，也可以是Unicode的字母字符。</p><p>按照惯例，ECMAScript标识符使用驼峰大小写形式。</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">getAddMethod</span>
<span class="line">getSubMethod</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然这种写法并不是强制的，但是这种形式跟ESMCScript内置函数和对象的命名方式一致，所以算是最佳实战</p><div class="hint-container warning"><p class="hint-container-title">注意</p><p>关键字、保留字、true、false、null不能作为标识符。</p></div><h2 id="_3-注释" tabindex="-1"><a class="header-anchor" href="#_3-注释"><span>3.注释</span></a></h2><p>ECMAScript使用C语言的风格来注释</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token comment">//单行注释</span></span>
<span class="line"><span class="token comment">/*</span>
<span class="line">  多行注释</span>
<span class="line">*/</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-严格模式" tabindex="-1"><a class="header-anchor" href="#_4-严格模式"><span>4.严格模式</span></a></h2><p>ECMAScript5增加了严格模式的概念。严格模式是一种不同的JavaScript解析和执行模型，ECMAScript3的一些不规范写法在这种模式下会被处理，对于不安全的活动将抛出错误。要对整个脚本启用严格模式，需要添加如下一行</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token string">&quot;use strict&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>严格模式会影响JavaScript执行的很多方面，所有现代浏览器都支持严格模式。</p><h2 id="_5-语句" tabindex="-1"><a class="header-anchor" href="#_5-语句"><span>5.语句</span></a></h2><p>ECMAScript中的语句以分号结尾。省略分号意味着由解析器确定语句在哪里结尾。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">let</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token comment">// 没有分号但是代码有效</span></span>
<span class="line"><span class="token keyword">let</span> sum <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// 推荐写法</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>多条语句可以合并到一个代码块中。代码块由一个花括号包裹({})。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code><span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>if之类的控制语句只在执行多条语句时要求必须有代码块。在控制语句中使用代码块可以让内容更清晰，在需要修改代码时也可以减少出错的可能性。</p>`,25)),t(s)])}const h=n(l,[["render",r]]),u=JSON.parse('{"path":"/notes/web/javascript/base/grammar/%E8%AF%AD%E6%B3%95.html","title":"JavaScript语法","lang":"zh-CN","frontmatter":{"title":"JavaScript语法","meta":[{"name":"JavaScript语法","content":"本节将详细介绍JavaScript基本语法"}]},"git":{"updatedTime":1746537073000,"contributors":[{"name":"chenshicong","username":"chenshicong","email":"chenshicong666@qq.com","commits":3,"url":"https://github.com/chenshicong"}],"changelog":[{"hash":"7f9e1669cbce7cf7fddb2dc6d9204ded4e12ce00","time":1746537073000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"主页修改"},{"hash":"56e224fa3ee356e33897969021df2697811a8e81","time":1746503797000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"JavaScript语法"},{"hash":"7147a4a879b21c73d29b58ce542b287cf6736784","time":1745297037000,"email":"chenshicong666@qq.com","author":"chenshicong","message":"js基础"}]},"filePathRelative":"notes/web/javascript/base/grammar/语法.md"}');export{h as comp,u as data};
